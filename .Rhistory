boxplot(freq$n_iter ~ freq$meth, ylim = c(0, 1e4), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 5.5, "Frequency of iterations", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, seq(0, 10000, 2000), cex = cex.plot.tex, at = seq(0, 10000, 2000), las = 2)
box()
dev.off()
#### Plot 2-way graphic ####
own.cex <- 1
cex.plot.tex <- 1.8
tikzDevice::tikz('Fig/fig1_ex1.tex', w = 14 * own.cex, h = 7 * own.cex)
par(mfcol = c(1,2))
par(mar = c(6, 5, 2, 3) + 0.1)
boxplot(cbind(mb.4$time, mb.1$time, mb.2$time, mb.3$time), ylim = c(0, 4e7), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 3.5, "Calculation time [millisecond]", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, c(0 : 4), cex = cex.plot.tex, at = seq(0, 4e7, 1e7), las = 2)
box()
par(mar = c(6, 5, 2, 3) + 0.1)
boxplot(freq$n_iter ~ freq$meth, ylim = c(0, 1e4), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 5.5, "Frequency of iterations", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, seq(0, 10000, 2000), cex = cex.plot.tex, at = seq(0, 10000, 2000), las = 2)
box()
dev.off()
#### Plot 2-way graphic ####
own.cex <- 1
cex.plot.tex <- 2
tikzDevice::tikz('Fig/fig1_ex1.tex', w = 14 * own.cex, h = 7 * own.cex)
par(mfcol = c(1,2))
par(mar = c(6, 5, 2, 3) + 0.1)
boxplot(cbind(mb.4$time, mb.1$time, mb.2$time, mb.3$time), ylim = c(0, 4e7), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 3.5, "Calculation time [millisecond]", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, c(0 : 4), cex = cex.plot.tex, at = seq(0, 4e7, 1e7), las = 2)
box()
par(mar = c(6, 5, 2, 3) + 0.1)
boxplot(freq$n_iter ~ freq$meth, ylim = c(0, 1e4), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 5.5, "Frequency of iterations", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, seq(0, 10000, 2000), cex = cex.plot.tex, at = seq(0, 10000, 2000), las = 2)
box()
dev.off()
freq <- rbind(freq.4, freq.1, freq.2, freq.3)
cex.plot.tex <- 1.6
tikzDevice::tikz('Fig/fig1_ex1-counts.tex', h = 6, w = 6)
par(mar = c(6, 6, 2, 2) + 0.1)
boxplot(freq$n_iter ~ freq$meth, ylim = c(0, 1e4), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 5, "Frequency of iterations", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, seq(0, 10000, 2000), cex = cex.plot.tex, at = seq(0, 10000, 2000), las = 2)
box()
dev.off()
#### Plot 2-way graphic ####
own.cex <- 1
cex.plot.tex <- 2
tikzDevice::tikz('Fig/fig1_ex1.tex', w = 14 * own.cex, h = 7 * own.cex)
par(mfcol = c(1,2))
par(mar = c(6, 5, 2, 3) + 0.1)
boxplot(cbind(mb.4$time, mb.1$time, mb.2$time, mb.3$time), ylim = c(0, 4e7), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 3.5, "Calculation time [millisecond]", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, c(0 : 4), cex = cex.plot.tex, at = seq(0, 4e7, 1e7), las = 2)
box()
par(mar = c(6, 5, 2, 3) + 0.1)
boxplot(freq$n_iter ~ freq$meth, ylim = c(0, 1e4), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 5.5, "Frequency of iterations", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, seq(0, 10000, 2000), cex = cex.plot.tex, at = seq(0, 10000, 2000), las = 2)
box()
dev.off()
nloop <- 10000 # Caution: Time intensive
## optim_sa ##
freq.1 <- data.frame(n_iter = rep(NA, nloop), meth = "optim_sa")
for(i in c(1 : nloop)) {
freq.1[i, c(1)] <- sum(as.data.frame(
optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 50,
r = 0.85,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("trace")])$trace.n_inner)
}
## optim()  ##
freq.2 <- data.frame(n_iter = rep(NA, nloop), meth = "optim_sann")
for(i in c(1 : nloop)) {
freq.2$n_iter[i] <- optim(fn = hi, par = c(10, 10), method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = TRUE))$counts[1]
# Always 9999
}
## Call GenSA  ##
freq.3 <- data.frame(n_iter = rep(9999, nloop), meth = "GenSA")
for(i in c(1 : nloop)) {
freq.3$n_iter[i] <- GenSA(fn = hi, par = c(10, 10), lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 50, nb.stop.improvement = 30, maxit = 500))$counts
}
freq.4 <- data.frame(n_iter = rep(9999, nloop), meth = "optim_nm")
for(i in c(1 : nloop)) {
freq.4$n_iter[i] <- optim(fn = hi, par = c(-10, -10),  method = "Nelder-Mead")$counts[1]
}
freq <- rbind(freq.4, freq.1, freq.2, freq.3)
own.cex <- 1
cex.plot.tex <- 2
par(mfcol = c(1,2))
par(mar = c(6, 5, 2, 3) + 0.1)
boxplot(cbind(mb.4$time, mb.1$time, mb.2$time, mb.3$time), ylim = c(0, 4e7), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 3.5, "Calculation time [millisecond]", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, c(0 : 4), cex = cex.plot.tex, at = seq(0, 4e7, 1e7), las = 2)
box()
par(mar = c(6, 5, 2, 3) + 0.1)
boxplot(freq$n_iter ~ freq$meth, ylim = c(0, 1e4), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 5.5, "Frequency of iterations", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, seq(0, 10000, 2000), cex = cex.plot.tex, at = seq(0, 10000, 2000), las = 2)
box()
#### Plot 2-way graphic ####
own.cex <- 1
cex.plot.tex <- 2
tikzDevice::tikz('Fig/fig1_ex1.tex', w = 14 * own.cex, h = 7 * own.cex)
par(mfcol = c(1,2))
par(mar = c(6, 5, 2, 4) + 0.1)
boxplot(cbind(mb.4$time, mb.1$time, mb.2$time, mb.3$time), ylim = c(0, 4e7), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 3.5, "Calculation time [millisecond]", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, c(0 : 4), cex = cex.plot.tex, at = seq(0, 4e7, 1e7), las = 2)
box()
par(mar = c(7, 5, 2, 3) + 0.1)
boxplot(freq$n_iter ~ freq$meth, ylim = c(0, 1e4), axes = FALSE)
axis(1, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 5.5, "Frequency of iterations", cex = cex.plot.tex)
mtext(side = 1, line = c(1.5, 3, 1.5, 3), at = c(1 : 4), c("optim (NM)", "optim\\_sa", "optim (SA)", "GenSA"), cex = cex.plot.tex)
axis(2, las = 2, labels = FALSE, lwd = 0, lwd.ticks = 1)
mtext(side = 2, line = 1.5, seq(0, 10000, 2000), cex = cex.plot.tex, at = seq(0, 10000, 2000), las = 2)
box()
dev.off()
?optim
?GenSA
save.image(file = '/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/RFiles/Ex1_count.RData')
#------------------------------------------------------#
#### Example 1: Himmelblau, integer parameter space ####
#------------------------------------------------------#
## Clear workspace ##
rm(list = ls())
## Load packages ##
library(optimization)
library(xtable)
library(microbenchmark)
## setwd ##
setwd('/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/')
## Himmelblau's function ##
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
var_func_int <- function (para_0, fun_length, rf, temp = NA){
ret_var_func <- para_0 + sample.int(rf, fun_length, replace = TRUE) *
((rbinom(fun_length, 1, 0.5) * -2) + 1)
return (ret_var_func)
}
#-----------------------#
## Integer programming ##
#-----------------------#
## optim_sa ##
int_programming <- optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 50,
r = 0.85,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE,
vf = var_func_int
)
)
own.cex <- 0.6
optim(par = c(10, 10), fn = hi, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = int_programming,  method = "SANN")
optim(par = c(10, 10), fn = hi, gr = int_programming, method = "SANN")
var_func_int_gr <- function (x){
ret_var_func <- para_0 + sample.int(rf, fun_length, replace = TRUE) *
((rbinom(fun_length, 1, 0.5) * -2) + 1)
return (ret_var_func)
}
var_func_int_gr <- function (x){
ret_var_func <- x + sample.int(x, length(x), replace = TRUE) *
((rbinom(fun_length, 1, 0.5) * -2) + 1)
return (ret_var_func)
}
var_func_int_gr <- function (x){
ret_var_func <- x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
return (ret_var_func)
}
optim(par = c(10, 10), fn = hi, gr = var_func_int(), method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr(), method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
x <- c(1,2)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
sample.int(x, length(x), replace = TRUE)
rbinom(length(x), 1, 0.5) * -2) + 1
((rbinom(length(x), 1, 0.5) * -2) + 1)
((rbinom(length(x), 1, 0.5) * -2) + 1)
((rbinom(length(x), 1, 0.5) * -2) + 1)
((rbinom(length(x), 1, 0.5) * -2) + 1)
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x <- 1
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
var_func_int_gr <- function (x){
x <- x[1]
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
}
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
var_func_int_gr <- function (x){
x + sample.int(x, length(x), replace = TRUE) *
((rbinom(length(x), 1, 0.5) * -2) + 1)
}
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
x1 = 1
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
sample.int(x1, replace = TRUE)
x1 + 1 * ((rbinom(length(x1), 1, 0.5) * -2) + 1)
x1 + 1 * ((rbinom(length(x1), 1, 0.5) * -2) + 1)
x2 + 1 * ((rbinom(length(x2), 1, 0.5) * -2) + 1)
var_func_int_gr <- function (x){
x1 <- x[1]
x2 <- x[2]
c(x1 + 1 * ((rbinom(length(x1), 1, 0.5) * -2) + 1),
x2 + 1 * ((rbinom(length(x2), 1, 0.5) * -2) + 1))
}
var_func_int_gr <- function (x) {
x1 <- x[1]
x2 <- x[2]
c(x1 + 1 * ((rbinom(length(x1), 1, 0.5) * -2) + 1),
x2 + 1 * ((rbinom(length(x2), 1, 0.5) * -2) + 1))
}
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
var_func_int_gr
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
var_func_int_gr(c(1,1))
x1 + sample.int(2, 1, replace = TRUE) * ((rbinom(length(x1), 1, 0.5) * -2) + 1)
var_func_int_gr <- function (x) {
x1 <- x[1]
x2 <- x[2]
c(x1 + sample.int(2, 1, replace = TRUE) * ((rbinom(length(x1), 1, 0.5) * -2) + 1),
x2 + sample.int(2, 1, replace = TRUE) * ((rbinom(length(x2), 1, 0.5) * -2) + 1))
}
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
sample.int(2, 1, replace = TRUE)
var_func_int_gr <- function (x) {
x1 <- x[1]
x2 <- x[2]
c(x1 + sample.int(1, 1, replace = TRUE) * ((rbinom(length(x1), 1, 0.5) * -2) + 1),
x2 + sample.int(1, 1, replace = TRUE) * ((rbinom(length(x2), 1, 0.5) * -2) + 1))
}
var_func_int_gr <- function (x) {
x1 <- x[1]
x2 <- x[2]
c(x1 + sample.int(1, 1, replace = TRUE) * ((rbinom(length(x1), 1, 0.5) * -2) + 1),
x2 + sample.int(1, 1, replace = TRUE) * ((rbinom(length(x2), 1, 0.5) * -2) + 1))
}
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN")
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", trace = TRUE)
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
int_programming <- optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 50,
r = 0.85,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE,
vf = var_func_int
)
)
int_programming
var_func_int_gr <- function (x) {
x1 <- x[1]
x2 <- x[2]
c(x1 + sample.int(1, 1, replace = TRUE) * ((rbinom(length(x1), 15, 0.5) * -2) + 1),
x2 + sample.int(1, 1, replace = TRUE) * ((rbinom(length(x2), 15, 0.5) * -2) + 1))
}
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
var_func_int_gr <- function (x) {
x1 <- x[1]
x2 <- x[2]
c(x1 + sample.int(1, 1, replace = TRUE) * ((rbinom(length(x1), 15, 0.5) * -2) + 1),
x2 + sample.int(1, 1, replace = TRUE) * ((rbinom(length(x2), 15, 0.5) * -2) + 1))
}
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
var_func_int_gr <- function (x) {
x1 <- x[1]
x2 <- x[2]
c(x1 + sample.int(10, 1, replace = TRUE) * ((rbinom(length(x1), 15, 0.5) * -2) + 1),
x2 + sample.int(10, 1, replace = TRUE) * ((rbinom(length(x2), 15, 0.5) * -2) + 1))
}
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
int_programming <- optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 50,
r = 0.85,
rf = 3,
ac_acc = 0.1,
dyn_rf = FALSE,
vf = var_func_int
)
)
int_programming
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))
int_programming <- optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 50,
r = 0.85,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE,
vf = var_func_int
)
)
optim(par = c(10, 10), fn = hi, gr = var_func_int_gr, method = "SANN", control = list(trace = TRUE))

ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 200,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 150,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 100,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 100,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 150,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 150,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, maxit = 3900, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, maxit = 3900, reltol = 0.1, temp = 100, trace = TRUE))
3900/2)()*3
(3900/2)*3
trace.2 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, maxit = 5850, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
trace.2 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 150, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 150, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 150, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 500, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 60, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 80, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 70, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
trace.3 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(maxit = 5850, temperature = 500, nb.stop.improvement = 30))[c("value", "par")])
}
mean(trace.3$fun)
mean(trace.3$fun)
trace.3 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 500, nb.stop.improvement = 30, maxit = 4000))[c("value", "par")])
}
mean(trace.3$fun)
table((apply(trace.3[c(2,3)], 1, paste, collapse = "/")))
trace.4 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.4[i, ] <- unlist(optim(par = c(-10, -10), fn = hi, method = "Nelder-Mead")[c("value", "par")])
}
mean(trace.4$fun)
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 50, nb.stop.improvement = 30, maxit = 4000))[c("value", "par")])
}
mean(trace.3$fun)
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 500, nb.stop.improvement = 30, maxit = 4000))[c("value", "par")])
}
mean(trace.3$fun)
table((apply(trace.3[c(2,3)], 1, paste, collapse = "/")))
?postgresql
set.seed(1)
runif(1)
set.seed(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
install.packages("lpSolve")
install.packages("lpSolveAPI")
library(lpsolve)
library(lpSolve)
obj.fun <- c (20 , 60)
constr <- matrix ( c (30 , 20 , 5 , 10 , 1 , 1) , ncol = 2 , byrow =
TRUE )
constr.dir <- c ( " <= " , " <= " , " >= " )
rhs <- c (2700 , 850 , 95)
prod.sol <- lp ( " max " , obj . fun , constr , constr . dir , rhs ,
compute . sens = TRUE )
prod.sol <- lp ( " max " , obj.fun , constr , constr.dir , rhs ,
compute.sens = TRUE )
prod.sol <- lp ("max", obj.fun, constr, constr.dir, rhs,
compute.sens = TRUE)
source('~/P/Lehre/M2 Optimierungsmethoden Forstplanung/2016 SS/Übungsaufgaben Excel 2010/01_Pflanzkamp/pflanzkamp.R', echo=TRUE)
constr.dir <- c("<=", "<=", ">=")
prod.sol <- lp ("max", obj.fun, constr, constr.dir, rhs,
compute.sens = TRUE)
prod.sol
summary(prod.sol)
prod . sol $ duals . from
prod.sol$duals.from
prod.sol$duals.to
prod.sol$sens.coef.from
prod.sol$sens.coef.to
prod.sol$const.count
prod.sol$objective
prod.sol$compute.sens
prod.sol$duals
?lp
library(boot)
?simplex()
library(boot)
enj <- c(200, 6000, 3000, -200)
fat <- c(800, 6000, 1000, 400)
vitx <- c(50, 3, 150, 100)
vity <- c(10, 10, 75, 100)
vitz <- c(150, 35, 75, 5)
simplex(a = enj, A1 = fat, b1 = 13800, A2 = rbind(vitx, vity, vitz),
b2 = c(600, 300, 550), maxi = TRUE)
sol.2 <- simplex(a = enj, A1 = fat, b1 = 13800, A2 = rbind(vitx, vity, vitz),
b2 = c(600, 300, 550), maxi = TRUE)
plot(sol.2)
sol.2 <- simplex(a = enj, A1 = fat, b1 = 13800, A2 = rbind(vitx, vity, vitz),
b2 = c(600, 300, 550), maxi = TRUE)
sol.2$A
print(sol.2)
sol.2
summary(sol.2)
sol.2
sol.2$soln
sol.2$solved
sol.2$value
sol.2$A
install.packages("Rmosek")
prod.sol$duals.from
prod.sol$duals.to
prod.sol$constraints
library(lpSolveAPI)
?lp
library(lpSolveAPI)
library(ggplot2)
library(reshape)
library(gridExtra)
train<-data.frame(wagon=c('w1','w2','w3'), weightcapacity=c(10,8,12), spacecapacity=c(5000,4000,8000))
cargo<-data.frame(type=c('c1','c2','c3','c4'), available=c(18,10,5,20), volume=c(400,300,200,500),profit=c(2000,2500,5000,3500))
library(boot)
lpmodel<-make.lp(2*NROW(train)+NROW(cargo),12)
column<-0
row<-0
for(wg in train$wagon){
row<-row+1
for(type in seq(1,NROW(cargo$type))){
column<-column+1
#this takes the arguments 'column','values' & 'indices' (as in where these values should be placed in the column)
set.column(lpmodel,column,c(1, cargo[type,'volume'],1), indices=c(row,NROW(train)+row, NROW(train)*2+type))
}}
set.constr.value(lpmodel, rhs=train$weightcapacity, constraints=seq(1,NROW(train)))
set.constr.value(lpmodel, rhs=train$spacecapacity, constraints=seq(NROW(train)+1,NROW(train)*2))
set.constr.value(lpmodel, rhs=cargo$available, constraints=seq(NROW(train)*2+1,NROW(train)*2+NROW(cargo)))
set.objfn(lpmodel, rep(cargo$profit,NROW(train)))
lp.control(lpmodel,sense='max')
write.lp(lpmodel,'model.lp',type='lp')
solve(lpmodel)
get.objective(lpmodel)
get.dual.solution(lpmodel)
get.objective(lpmodel)
solve(lpmodel)
lpmodel
install.packages("Deriv")
library(Deriv)
?Driv
?Deriv
Deric(x^2)
Deriv(x^2)
Deriv(e^x)
Deriv(e^(x))
deriv <- function (x) {x^2}
Deriv(deriv)
function () {(p * (q)^n * exp(-r * tn) - c) / (1 - exp(-r * tn))}
fun < - function (tn) {(p * (q)^n * exp(-r * tn) - c) / (1 - exp(-r * tn))}
fun <- function (tn) {(p * (q)^n * exp(-r * tn) - c) / (1 - exp(-r * tn))}
Deriv (fun)
fun <- function (t) {(p * (q)^n * exp(-r * t) - c) / (1 - exp(-r * t))}
Deriv (fun)
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages("RODBC")
exit
install.packages('RODBC')
library(RODBC)
library(RODBC)
??RODBC
odbcConnect('/home/khusman1/P/Projekte/BioEconomy/Datenbank')
?odbcConnect
?odbcConnectAccess
require(Hmisc) # need also mdbtools, in Fedora do  >yum install mdbtools
install.packages(Hmisc)
install.packages("Hmisc")
require(Hmisc) # need also mdbtools, in Fedora do  >yum install mdbtools
path <- "/home/khusman1/P/Projekte/BioEconomy/Datenbank"
URL <-  "http://www.knmi.nl/"
PATH <- "cliwoc/download/"
FILE <- "CLIWOC15_2000.zip"
download.file(paste(URL,PATH,FILE,sep=""),
paste(path,"CLIWOC15_2000.zip",sep=""))
paste(URL,PATH,FILE,sep="")
aste(path,"CLIWOC15_2000.zip",sep="")
paste(path,"CLIWOC15_2000.zip",sep="")
download.file(paste(URL,PATH,FILE,sep=""))
?mdb.get
dat <- mdb.get('/home/khusman1/P/Projekte/BioEconomy/Datenbank/bwi.mdb')
dat
dat <- mdb.get('/home/khusman1/P/Projekte/BEST/BiomasseDaten.mdb')
require(Hmisc)
dat <- mdb.get('/home/khusman1/P/Projekte/BEST/BiomasseDaten.mdb')
shiny::runApp('Documents/Arbeitszeiten/Arbeitszeit')
dat <- mdb.get('/home/khusman1/P/Dokumente/R/Datenbanken/test_db.mdb')
dat
?Hmisc.Overview
require(Hmisc)
accdb.get()
dat <- mdb.get('/home/khusman1/P/Dokumente/R/Datenbanken/test_db.accdb')
dat1 <- mdb.get('/home/khusman1/P/Dokumente/R/Datenbanken/test_db.mdb')
dat2 <- mdb.get('/home/khusman1/P/Dokumente/R/Datenbanken/test_db.accdb')
dat2
rm(list = ls())
library(optimization)
library(xtable)
library(microbenchmark)
setwd('/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/')
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
var_func_int <- function (para_0, fun_length, rf, temp = NA){
ret_var_func <- para_0 + sample.int(rf, fun_length, replace = TRUE) *
((rbinom(fun_length, 1, 0.5) * -2) + 1)
return (ret_var_func)
}
var_func_int_gr <- function (x) {
x1 <- x[1]
x2 <- x[2]
c(x1 + sample.int(10, 1, replace = TRUE) * ((rbinom(length(x1), 15, 0.5) * -2) + 1),
x2 + sample.int(10, 1, replace = TRUE) * ((rbinom(length(x2), 15, 0.5) * -2) + 1))
}
int_programming <- optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 50,
r = 0.85,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE,
vf = var_func_int
)
)
own.cex <- 0.6
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-5, -5), upper = c(5, 5))
par(mar=c(3.5, 3.5, 1, 1) +0.1, new = TRUE)
arrows(x0 = -3.5, y0 = 2.5, x1 = -2, y1  = 3, col = 'white', lwd = 4)
arrows(x0 = -3.5, y0 = 2.5, x1 = -2, y1  = 3, col = 'black', lwd = 2)
text(x = -3.9, y = 2.5, "12", cex = 1.2, col = 'white')
text(x = -3.9, y = 2.5, "12", cex = 1, col = 'black')
arrows(x0 = -2.5, y0 = -1.5, x1 = -4, y1  = -1, col = 'white', lwd = 4)
arrows(x0 = -2.5, y0 = -1.5, x1 = -4, y1  = -1, col = 'black', lwd = 2)
text(x = -2.1, y = -1.5, "21", cex = 1.2, col = 'white')
text(x = -2.1, y = -1.5, "21", cex = 1, col = 'black')
int_programming
int_programming$trace

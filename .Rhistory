dat <- as.data.frame(dat)
names(dat) <- c('age', 'm1', 'm2', 'm3')
## visual inspection of raw data ##
plot(m1 ~ age, data = dat)
points(m2 ~ age, data = dat, col = 2)
points(m3 ~ age, data = dat, col = 3)
gam.m1 <- gam(m1 ~ s(age), data = dat)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1)
## Data transformation ##
# Cumulative Weibull distribution (cdf) is known to converge easier than the density function
dat$m1.cum <- cumsum(dat$m1)
plot(m1.cum ~ age, data = dat)
# cdf must integrate to 1
dat$m1.sc <- dat$m1 / 31.96
## Bootstrap data to gain variation for the regression analysis
nboot <- 100
dat.boot <- data.frame(age = numeric(0), m1 = numeric(0))
for(i in c(dat$age)) {
dat.boot <- rbind(dat.boot, data.frame(age = i, m1 = rnorm(nboot, mean = dat$m1[dat$age == i], sd = 0.01)))
}
dat.boot$m1.sc <- dat.boot$m1 / 31.96
plot(m1 ~ age, data = dat.boot)
gam.m1.boot <- gam(m1 ~ s(age), data = dat.boot)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1.boot)
dat$m1.cum.1 <- dat$m1.cum / dat$m1.cum[29]
dat$m1.1 <- dat$m1 /  dat$m1.cum[29]
pwb <- function (x, a, b) {
1 - exp(- (x/b)^a)
}
pweibull(1,1,1)
pwb(1,1,1)
reg.m1.pwb <- nls(m1.cum.1 ~ 1 - exp(- (age/b)^a), start = list (a = 6, b = 50), data = dat[dat$m1.cum.1 > 0, ])
plot(m1.cum.1 ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) ~ dat$age)
plot(m1.cum ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) * dat$m1.cum[29] ~ dat$age)
plot(dat$m1.1 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) ~ dat$age)
wb <- function (x, a, b) {
(a / b) * (x / b)^(a - 1) * exp(- (x / b)^a)
}
wb(x = c(1), a = 2, b = 1)
dweibull(x = c(1), shape = 2, scale = 1)
head(dat)
reg.m1.wb.sc <- nls(formula = m1.1 ~ (a / b) * (age / b)^(a - 1) * exp(- (age / b)^a), start = list(a = 4.9, b = 87.7), data = dat.boot[dat.boot$m1.sc > 0, c('age', 'm1.1')])
dat.boot$m1.1 <- dat.boot$m1 /  dat$m1.cum[29]
reg.m1.wb.sc <- nls(formula = m1.1 ~ (a / b) * (age / b)^(a - 1) * exp(- (age / b)^a), start = list(a = 4.9, b = 87.7), data = dat.boot[dat.boot$m1.1 > 0, c('age', 'm1.1')])
reg.m1.wb.sc
plot(dat$m1.1 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) ~ dat$age)
plot(dat$m1 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) * 31.96 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) * dat$m1.cum[29] ~ dat$age)
#--------------------------#
#### Fit a distribution ####
#--------------------------#
#---------------#
## Preparation ##
#---------------#
## Load libraries ##
library(xlsx)
library(mgcv)
library(MASS)
library(nlme)
library(nls2)
## Load and prepare data ##
dat <- t(read.xlsx('/home/khusman1/P/Sonderauswertungen/2017/Dichtefunktion_Stefan/Daten_Dichtefunktion_Übergangswahrscheinlichkeiten.xlsx',
sheetIndex = 1, startRow = 13, endRow = 16, header = FALSE))
dat <- as.data.frame(dat)
names(dat) <- c('age', 'm1', 'm2', 'm3')
## visual inspection of raw data ##
plot(m1 ~ age, data = dat)
points(m2 ~ age, data = dat, col = 2)
points(m3 ~ age, data = dat, col = 3)
gam.m1 <- gam(m1 ~ s(age), data = dat)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1)
## Data transformation ##
# Cumulative Weibull distribution (cdf) is known to converge easier than the density function
dat$m1.cum <- cumsum(dat$m1)
plot(m1.cum ~ age, data = dat)
# cdf must integrate to 1
dat$m1.cum.1 <- dat$m1.cum / dat$m1.cum[29]
dat$m1.sc <- dat$m1 / 31.96
## Bootstrap data to generate variation for the regression analysis. This helps the nls to converge without adding information to the data.
nboot <- 100
dat.boot <- data.frame(age = numeric(0), m1 = numeric(0))
for(i in c(dat$age)) {
dat.boot <- rbind(dat.boot, data.frame(age = i, m1 = rnorm(nboot, mean = dat$m1[dat$age == i], sd = 0.01)))
}
dat.boot$m1.sc <- dat.boot$m1 / 31.96
plot(m1 ~ age, data = dat.boot)
gam.m1.boot <- gam(m1 ~ s(age), data = dat.boot)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1.boot)
pwb <- function (x, a, b) {
1 - exp(- (x/b)^a)
}
pweibull(1,1,1)
pwb(1,1,1)
reg.m1.pwb <- nls(m1.cum.1 ~ 1 - exp(- (age/b)^a), start = list (a = 6, b = 50), data = dat[dat$m1.cum.1 > 0, ])
plot(m1.cum.1 ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) ~ dat$age)
plot(m1.cum ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) * dat$m1.cum[29] ~ dat$age)
plot(dat$m1.1 ~ dat$age)
plot(dat$m1.sc ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) ~ dat$age)
plot(m1 ~ age, data = dat.boot)
gam.m1.boot <- gam(m1 ~ s(age), data = dat.boot)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1.boot)
fit.m1.norm <- fitdistr(densfun = 'normal', x = dat$m1)
fit.m1.norm
xfit.m1.norm <- seq(fit.m1.norm$estimate[1] - 2 * fit.m1.norm$estimate[2], fit.m1.norm$estimate[1] + 2 * fit.m1.norm$estimate[2], length = 100)
yfit.m1.norm <- dnorm(xfit.m1.norm, mean = fit.m1.norm$estimate[1], sd = fit.m1.norm$estimate[2])
xfit.m1.norm <- (xfit.m1.norm / fit.m1.norm$estimate[1]) * dat[which.max(dat$m1),'age']
xfit.m1.norm
plot(dat$m1 ~ dat$age)
lines(yfit.m1.norm ~ xfit.m1.norm)
sc.norm <- function (x, mu, sigma, scale) {
(1 / (sigma * sqrt(2*pi)) * exp(-(1/2) * ((x - mu) / sigma)^2)) * scale
}
sc.norm(1, 0, 1, 1)
dnorm(x = 1, sd = 1, mean = 0) # just for comparison
reg.m1.norm.sc <- nls(formula = m1 ~ (1 / (sigma * sqrt(2 * pi)) * exp(-(1 / 2) * ((age - mu) / sigma)^2))* scale, data = dat[, c('age', 'm1')], start = list(sigma = 10, mu = 90, scale = 20))
reg.m1.norm <- nls(formula = m1 ~ (1 / (sigma * sqrt(2 * pi)) * exp(-(1 / 2) * ((age - mu) / sigma)^2)), data = dat[, c('age', 'm1')], start = list(sigma = 10, mu = 90))
reg.m1.norm.boot <- nls(formula = m1 ~ (1 / (sigma * sqrt(2 * pi)) * exp(-(1 / 2) * ((age - mu) / sigma)^2))* scale, data = dat.boot[, c('age', 'm1')], start = list(sigma = 10, mu = 90, scale = 20))
plot(dat$m1 ~ dat$age)
lines(fitted(reg.m1.norm.sc) ~ dat$age)
lines(fitted(reg.m1.norm) ~ dat$age)
reg.m1.norm.sc
reg.m1.norm.sc
#--------------------------#
#### Fit a distribution ####
#--------------------------#
#---------------#
## Preparation ##
#---------------#
## Load libraries ##
library(xlsx)
library(mgcv)
library(MASS)
library(nlme)
library(nls2)
## Load and prepare data ##
dat <- t(read.xlsx('/home/khusman1/P/Sonderauswertungen/2017/Dichtefunktion_Stefan/Daten_Dichtefunktion_Übergangswahrscheinlichkeiten.xlsx',
sheetIndex = 1, startRow = 13, endRow = 16, header = FALSE))
dat <- as.data.frame(dat)
names(dat) <- c('age', 'm1', 'm2', 'm3')
## visual inspection of raw data ##
plot(m1 ~ age, data = dat)
points(m2 ~ age, data = dat, col = 2)
points(m3 ~ age, data = dat, col = 3)
gam.m1 <- gam(m1 ~ s(age), data = dat)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1)
## Data transformation ##
# Cumulative Weibull distribution (cdf) is known to converge easier than the density function
dat$m1.cum <- cumsum(dat$m1)
plot(m1.cum ~ age, data = dat)
# cdf must sum up to 1. The data is transposed accordingly
dat$m1.cum.1 <- dat$m1.cum / dat$m1.cum[29]
# The density function only holds if it is integral from -inf to inf is 1. The correction factor is hard to regress directly for weibull since it
# is a very complex formula which will most probably not converge. It is thus approximated via normal distribution.
sc.norm <- function (x, mu, sigma, scale) {
(1 / (sigma * sqrt(2*pi)) * exp(-(1/2) * ((x - mu) / sigma)^2)) * scale
}
reg.m1.norm.sc <- nls(formula = m1 ~ (1 / (sigma * sqrt(2 * pi)) * exp(-(1 / 2) * ((age - mu) / sigma)^2))* scale, data = dat[, c('age', 'm1')], start = list(sigma = 10, mu = 90, scale = 20))
reg.m1.norm.sc
dat$m1.sc <- dat$m1 / coef(reg.m1.norm.sc)['scale']
dat$m1.sc
coef(reg.m1.norm.sc)['scale']
#--------------------------#
#### Fit a distribution ####
#--------------------------#
#---------------#
## Preparation ##
#---------------#
## Load libraries ##
library(xlsx)
library(mgcv)
library(MASS)
library(nlme)
library(nls2)
## Load and prepare data ##
dat <- t(read.xlsx('/home/khusman1/P/Sonderauswertungen/2017/Dichtefunktion_Stefan/Daten_Dichtefunktion_Übergangswahrscheinlichkeiten.xlsx',
sheetIndex = 1, startRow = 13, endRow = 16, header = FALSE))
dat <- as.data.frame(dat)
names(dat) <- c('age', 'm1', 'm2', 'm3')
## visual inspection of raw data ##
plot(m1 ~ age, data = dat)
points(m2 ~ age, data = dat, col = 2)
points(m3 ~ age, data = dat, col = 3)
gam.m1 <- gam(m1 ~ s(age), data = dat)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1)
## Data transformation ##
# Cumulative Weibull distribution (cdf) is known to converge easier than the density function
dat$m1.cum <- cumsum(dat$m1)
plot(m1.cum ~ age, data = dat)
# cdf must sum up to 1. The data is transposed accordingly
dat$m1.cum.1 <- dat$m1.cum / dat$m1.cum[29]
# The density function only holds if it is integral from -inf to inf is 1. The correction factor is hard to regress directly for weibull since it
# is a very complex formula which will most probably not converge. It is thus approximated via normal distribution.
sc.norm <- function (x, mu, sigma, scale) {
(1 / (sigma * sqrt(2*pi)) * exp(-(1/2) * ((x - mu) / sigma)^2)) * scale
}
reg.m1.norm.sc <- nls(formula = m1 ~ (1 / (sigma * sqrt(2 * pi)) * exp(-(1 / 2) * ((age - mu) / sigma)^2))* scale, data = dat[, c('age', 'm1')], start = list(sigma = 10, mu = 90, scale = 20))
m1.trans.factor <- coef(reg.m1.norm.sc)['scale']
dat$m1.sc <- dat$m1 / m1.trans.factor
## Bootstrap data to generate variation for the regression analysis. This helps the nls to converge without adding information to the data.
nboot <- 100
dat.boot <- data.frame(age = numeric(0), m1 = numeric(0))
for(i in c(dat$age)) {
dat.boot <- rbind(dat.boot, data.frame(age = i, m1 = rnorm(nboot, mean = dat$m1[dat$age == i], sd = 0.01)))
}
dat.boot$m1.sc <- dat.boot$m1 / m1.trans.factor
dat.boot$m1.sc
gam.m1.boot <- gam(m1 ~ s(age), data = dat.boot)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1.boot)
pwb <- function (x, a, b) {
1 - exp(- (x/b)^a)
}
pweibull(1,1,1)
pwb(1,1,1)
pweibull(1,1,1) == pwb(1,1,1)
pweibull(c(-10 : 10),1,1) == pwb(1,1,1)
pweibull(c(-10 : 10), c(-10 : 10),1) == pwb(1,1,1)
pweibull(c(-10 : 10), c(0 : 10), c(-10 : 10)) == pwb(1,1,1)
pweibull(c(-10 : 10), c(1 : 10), c(1 : 10)) == pwb(1,1,1)
pweibull(c(-10 : 10), c(1 : 10), c(1 : 10)) == pwb(c(-10 : 10), c(1 : 10), c(1 : 10))
pwb(c(-10 : 10), c(1 : 10), c(1 : 10)
pwb(c(-10 : 10), c(1 : 10), c(1 : 10))
c(-10 : 10), c(1 : 10), c(1 : 10))
pweibull(c(-10 : 10), c(1 : 10), c(1 : 10))
pweibull(c(-10 : 10), 1, 1) == pwb(c(-10 : 10), 1, 1)
pweibull(c(-10 : 10), 1, 1)
pwb(c(-10 : 10), 1, 1)
pweibull(c(1 : 10), 1, 1) == pwb(c(1 : 10), 1, 1)
pweibull(c(1 : 50), 1, 1) == pwb(c(1 : 50), 1, 1)
all(pweibull(c(1 : 50), 1, 1) == pwb(c(1 : 50), 1, 1))
reg.m1.pwb <- nls(m1.cum.1 ~ 1 - exp(- (age/b)^a), start = list (a = 6, b = 50), data = dat[dat$m1.cum.1 > 0, ])
reg.m1.pwb
reg.m1.pwb <- nls(m1.cum.1 ~ 1 - exp(- (age/b)^a), start = list (a = 6, b = 50), data = dat[dat$m1.cum.1 > 0, ])
plot(m1.cum.1 ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) ~ dat$age)
plot(m1.cum ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) * dat$m1.cum[29] ~ dat$age)
hist(resid(reg.m1.pwb))
plot(dat$m1.sc ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.pwb)[1], scale = coef(reg.m1.pwb)[2]) ~ dat$age)
wb <- function (x, a, b) {
(a / b) * (x / b)^(a - 1) * exp(- (x / b)^a)
}
wb(x = c(1), a = 2, b = 1)
dweibull(x = c(1), shape = 2, scale = 1)
wb(x = c(1 : 50), a = 2, b = 1) == dweibull(x = c(1 : 50), shape = 2, scale = 1)
all(wb(x = c(1 : 50), a = 2, b = 1) == dweibull(x = c(1 : 50), shape = 2, scale = 1))
reg.m1.wb.sc <- nls(formula = m1.sc ~ (a / b) * (age / b)^(a - 1) * exp(- (age / b)^a), start = list(a = 4.9, b = 87.7), data = dat.boot[dat.boot$m1.sc > 0, c('age', 'm1.sc')])
plot(dat$m1.sc ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) ~ dat$age)
hist(resid(reg.m1.wb.sc))
plot(dat$m1 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) * 31.96 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) * m1.trans.factor ~ dat$age)
m1.trans.factor
lines(dweibull(x = dat$age, shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) * m1.trans.factor ~ dat$age)
plot(dat$m1 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) * m1.trans.factor ~ dat$age)
dat$m2.cum <- cumsum(dat$m2)
dat$m3.cum <- cumsum(dat$m3)
dat$m1.cum.1 <- dat$m1.cum / dat$m1.cum[29]
dat$m2.cum.1 <- dat$m2.cum / dat$m2.cum[29]
dat$m2.cum.1
dat$m3.cum.1 <- dat$m3.cum / dat$m3.cum[29]
dat$m3.cum.1
sc.norm <- function (x, mu, sigma, scale) {
(1 / (sigma * sqrt(2*pi)) * exp(-(1/2) * ((x - mu) / sigma)^2)) * scale
}
reg.m1.norm.sc <- nls(formula = m1 ~ (1 / (sigma * sqrt(2 * pi)) * exp(-(1 / 2) * ((age - mu) / sigma)^2))* scale, data = dat[, c('age', 'm1')], start = list(sigma = 10, mu = 90, scale = 20))
m1.trans.factor <- coef(reg.m1.norm.sc)['scale']
reg.m2.norm.sc <- nls(formula = m2 ~ (1 / (sigma * sqrt(2 * pi)) * exp(-(1 / 2) * ((age - mu) / sigma)^2))* scale, data = dat[, c('age', 'm2')], start = list(sigma = 10, mu = 90, scale = 20))
reg.m2.norm.sc
m2.trans.factor <- coef(reg.m2.norm.sc)['scale']
m2.trans.factor
dat$m2.sc <- dat$m2 / m2.trans.factor
dat
reg.m3.norm.sc <- nls(formula = m3 ~ (1 / (sigma * sqrt(2 * pi)) * exp(-(1 / 2) * ((age - mu) / sigma)^2))* scale, data = dat[, c('age', 'm3')], start = list(sigma = 10, mu = 90, scale = 20))
m3.trans.factor <- coef(reg.m3.norm.sc)['scale']
m3.trans.factor
dat$m1.sc <- dat$m1 / m1.trans.factor
dat$m2.sc <- dat$m2 / m2.trans.factor
dat$m3.sc <- dat$m3 / m3.trans.factor
nboot <- 100
dat.boot <- data.frame(age = numeric(0), m1 = numeric(0), m2 = numeric(0), m3 = numeric(0))
for(i in c(dat$age)) {
dat.boot <- rbind(dat.boot, data.frame(age = i,
m1 = rnorm(nboot, mean = dat$m1[dat$age == i], sd = 0.01),
m2 = rnorm(nboot, mean = dat$m2[dat$age == i], sd = 0.01),
m3 = rnorm(nboot, mean = dat$m3[dat$age == i], sd = 0.01)))
}
head(dat.boot)
dat.boot$m2.sc <- dat.boot$m2 / m2.trans.factor
dat.boot$m3.sc <- dat.boot$m3 / m3.trans.factor
gam.m1.boot <- gam(m1 ~ s(age), data = dat.boot)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1.boot)
gam.m2.boot <- gam(m2 ~ s(age), data = dat.boot)
gam.m1.boot <- gam(m1 ~ s(age), data = dat.boot)
gam.m2.boot <- gam(m2 ~ s(age), data = dat.boot)
gam.m2.boot <- gam(m2 ~ s(age), data = dat.boot)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1.boot)
plot(m2 ~ age, data = dat)
par(new = TRUE)
plot(gam.m2.boot)
plot(m3 ~ age, data = dat)
par(new = TRUE)
plot(gam.m3.boot)
gam.m1.boot <- gam(m1 ~ s(age), data = dat.boot)
gam.m2.boot <- gam(m2 ~ s(age), data = dat.boot)
gam.m3.boot <- gam(m3 ~ s(age), data = dat.boot)
plot(m1 ~ age, data = dat)
par(new = TRUE)
plot(gam.m1.boot)
plot(m2 ~ age, data = dat)
par(new = TRUE)
plot(gam.m2.boot)
plot(m3 ~ age, data = dat)
par(new = TRUE)
plot(gam.m3.boot)
reg.m2.pwb <- nls(m2.cum.1 ~ 1 - exp(- (age/b)^a), start = list (a = 6, b = 50), data = dat[dat$m2.cum.1 > 0, ])
reg.m2.pwb
plot(m1.cum.2 ~ age, data = dat)
plot(m2.cum.1 ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m2.pwb)[1], scale = coef(reg.m2.pwb)[2]) ~ dat$age)
plot(m2.cum ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m2.pwb)[1], scale = coef(reg.m2.pwb)[2]) * dat$m2.cum[29] ~ dat$age)
hist(resid(reg.m2.pwb))
plot(dat$m2.sc ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m2.pwb)[1], scale = coef(reg.m2.pwb)[2]) ~ dat$age)
reg.m2.wb.sc <- nls(formula = m2.sc ~ (a / b) * (age / b)^(a - 1) * exp(- (age / b)^a), start = list(a = coef(reg.m2.pwb)[1], b = coef(reg.m2.pwb)[2]), data = dat.boot[dat.boot$m1.sc > 0, c('age', 'm2.sc')])
reg.m2.pwb
coef(reg.m2.pwb)[1]
reg.m2.wb.sc <- nls(formula = m2.sc ~ (a / b) * (age / b)^(a - 1) * exp(- (age / b)^a), start = list(a = coef(reg.m2.pwb)[1], b = coef(reg.m2.pwb)[2]), data = dat.boot[dat.boot$m2.sc > 0, c('age', 'm2.sc')])
reg.m2.wb.sc
plot(dat$m2.sc ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m2.wb.sc)[1], scale = coef(reg.m2.wb.sc)[2]) ~ dat$age)
hist(resid(reg.m2.wb.sc))
plot(dat$m2 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m2.wb.sc)[1], scale = coef(reg.m2.wb.sc)[2]) * m2.trans.factor ~ dat$age)
reg.m3.pwb <- nls(m3.cum.1 ~ 1 - exp(- (age/b)^a), start = list (a = 6, b = 50), data = dat[dat$m3.cum.1 > 0, ])
plot(m3.cum.1 ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m3.pwb)[1], scale = coef(reg.m3.pwb)[2]) ~ dat$age)
plot(m3.cum ~ age, data = dat)
lines(pweibull(q = dat$age, shape = coef(reg.m3.pwb)[1], scale = coef(reg.m3.pwb)[2]) * dat$m3.cum[29] ~ dat$age)
hist(resid(reg.m3.pwb))
plot(dat$m3.sc ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m3.pwb)[1], scale = coef(reg.m3.pwb)[2]) ~ dat$age)
reg.m3.wb.sc <- nls(formula = m3.sc ~ (a / b) * (age / b)^(a - 1) * exp(- (age / b)^a), start = list(a = coef(reg.m3.pwb)[1], b = coef(reg.m3.pwb)[2]), data = dat.boot[dat.boot$m3.sc > 0, c('age', 'm3.sc')])
plot(dat$m3.sc ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m3.wb.sc)[1], scale = coef(reg.m3.wb.sc)[2]) ~ dat$age)
hist(resid(reg.m3.wb.sc))
plot(dat$m3.sc ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m3.wb.sc)[1], scale = coef(reg.m3.wb.sc)[2]) ~ dat$age)
plot(dat$m3 ~ dat$age)
lines(dweibull(x = dat$age, shape = coef(reg.m3.wb.sc)[1], scale = coef(reg.m3.wb.sc)[2]) * m3.trans.factor ~ dat$age)
summary(reg.m1.wb.sc)
summary(reg.m1.wb.sc)
summary(reg.m2.wb.sc)
summary(reg.m3.wb.sc)
AIC(reg.m3.wb.sc)
summary(reg.m1.wb.sc)
AIC(reg.m1.wb.sc)
summary(reg.m2.wb.sc)
AIC(reg.m2.wb.sc)
summary(reg.m3.wb.sc)
AIC(reg.m3.wb.sc)
plot(m1 ~ age, data = dat)
points(m2 ~ age, data = dat, col = 2)
points(m3 ~ age, data = dat, col = 3)
lines(dweibull(x = dat$age, shape = coef(reg.m3.wb.sc)[1], scale = coef(reg.m3.wb.sc)[2]) * m3.trans.factor ~ dat$age, col = 3)
plot(m1 ~ age, data = dat)
points(m2 ~ age, data = dat, col = 2)
points(m3 ~ age, data = dat, col = 3)
lines(dweibull(x = seq(0, 140, 0.1), shape = coef(reg.m3.wb.sc)[1], scale = coef(reg.m3.wb.sc)[2]) * m3.trans.factor ~ seq(0, 140, 0.1), col = 3)
lines(dweibull(x = seq(0, 140, 0.1), shape = coef(reg.m2.wb.sc)[1], scale = coef(reg.m2.wb.sc)[2]) * m2.trans.factor ~ seq(0, 140, 0.1), col = 2)
lines(dweibull(x = seq(0, 140, 0.1), shape = coef(reg.m1.wb.sc)[1], scale = coef(reg.m1.wb.sc)[2]) * m1.trans.factor ~ seq(0, 140, 0.1), col = 1)
install.packages("knitr")
library(knitr)
rm(list = ls())
library(GenSA)
library(optimization)
library(xtable)
library(microbenchmark)
## setwd ##
setwd('/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/')
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
nloop <- 10000 # Caution: Time intensive
## optim_sa ##
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop), meth = "optim_sa")
for(i in c(1 : nloop)) {
trace.1[i, c(1 : 3)] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 50,
r = 0.85,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
round(mean(trace.1$fun, na.rm = TRUE), digits = 3) <= 0.001
trace.1.rnd <- cbind(round(trace.1[, c(1 : 3)], digits = 1), trace.1[, 4])
table((apply(trace.1.rnd[c(2, 3)], 1, paste, collapse = "/")))
## Call optim()  ##
trace.2 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop),  meth = "optim_sann")
for(i in c(1 : nloop)) {
trace.2[i, c(1 : 3)] <- unlist(optim(fn = hi, par = c(10, 10), method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = TRUE))[c("value", "par")])
}
round(mean(trace.2$fun, na.rm = TRUE), digits = 3) <= 0.001
trace.2.rnd <- cbind(round(trace.2[, c(1 : 3)], digits = 1), trace.2[, 4])
table((apply(trace.2.rnd[c(2, 3)], 1, paste, collapse = "/")))
## Call GenSA  ##
trace.3 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop),  meth = "GenSA")
for(i in c(1 : nloop)) {
trace.3[i, c(1 : 3)]  <- unlist(GenSA(fn = hi, par = c(10, 10), lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 50, nb.stop.improvement = 30, maxit = 500))[c("value", "par")])
}
round(mean(trace.3$fun, na.rm = TRUE), digits = 3) <= 0.001
trace.3.rnd <- cbind(round(trace.3[, c(1 : 3)], digits = 1), trace.3[, 4])
table((apply(trace.3.rnd[c(2, 3)], 1, paste, collapse = "/")))
## Call NM direct search method ##
trace.4 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop),  meth = "optim_nm")
for(i in c(1 : nloop)) {
trace.4[i, c(1 : 3)] <- unlist(optim(fn = hi, par = c(-10, -10),  method = "Nelder-Mead")[c("value", "par")])
}
round(mean(trace.4$fun, na.rm = TRUE), digits = 3) <= 0.001
trace.4.rnd <- cbind(round(trace.4[, c(1 : 3)], digits = 1), trace.4[, 4])
table((apply(trace.4.rnd[c(2, 3)], 1, paste, collapse = "/")))
# -> Frequency of covariate combination is +/- equal for optim_sa & optim(SANN)
# GenSA & optim(Nelder-Mead) always only finds -3.8, -3.3
## Create df with results
# Bind dfs
trace <- rbind(trace.1, trace.2, trace.3, trace.4)
table(trace$x.factor)
# Make groups
trace$x.factor <- apply(round(trace[c(2, 3)], digits = 1), 1, paste, collapse = "/")
trace$x.factor[trace$x.factor %in% "3.6/-1.9"] <- "3.6/-1.8" # Combine -1.9 and -1.8 to one factor as the real solution is in between(approx. -1.85)
trace$x.factor <- factor(trace$x.factor)
cross.table.x <- xtabs(~meth + x.factor, data = trace)
xtable(cross.table.x / 100) # LaTex Table.
# save.image(file = '/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/RFiles/Ex1_frequency.RData')
# load(file = '/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/RFiles/Ex1_frequency.RData')
#---------------#
## Performance ##
#---------------#
cross.table.x
cross.table.x / 100
## Calculation ##
mb.1 <- microbenchmark(
optim_sa(fun = hi,
start = (c(10, 10)),
trace = FALSE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 50,
r = 0.85,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
), times = nloop
)
mb.2 <- microbenchmark(
optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = FALSE)), times = nloop
)
mb.3 <- microbenchmark(
GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 50, nb.stop.improvement = 30, maxit = 500)), times = nloop
)
mb.4 <- microbenchmark(
optim(par = c(-10, -10), fn = hi, method = "Nelder-Mead"), times = nloop
)
## Visualization & saving ##
# save.image(file = '/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/RFiles/Ex1_speed.RData')
# load(file = '/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/RFiles/Ex1_speed.RData')
boxplot(cbind(mb.4$time, mb.1$time, mb.2$time, mb.3$time))
# Counting outliers
length(mb.1$time[mb.1$time > 4e7])
length(mb.2$time[mb.2$time > 4e7])
length(mb.3$time[mb.3$time > 4e7])
length(mb.4$time[mb.4$time > 4e7])

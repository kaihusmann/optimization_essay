?optim
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, maxit = 3900, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
?GenSA
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(maxit = 3900, temperature = 500))[c("value", "par")])
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(maxit = 3900, temperature = 500))[c("value", "par")])
}
trace.3 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(maxit = 3900, temperature = 500, nb.stop.improvement = 30))[c("value", "par")])
}
table((apply(trace.3[c(2,3)], 1, paste, collapse = "/")))
unlist(optim(par = c(-10, -10), fn = hi, method = "Nelder-Mead")[c("value", "par")])
table((apply(trace.4[c(2,3)], 1, paste, collapse = "/")))
trace.4
mean(trace.1$fun)
fun
trace.1
trace.2
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 100,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 150,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 550,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 250,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 200,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 150,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 100,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 100,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 150,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
#-------------------------------------------------#
#### Example Himmelblau, cont. parameter space ####
#-------------------------------------------------#
library(GanSA)
library(optimization)
library(ggplot2)
# Himmelblau's function
# 4 minima at
# f(3, 2) = 0
# f(-2.804, -3.131) = 0
# f(-3.779, -3.283) = 0
# f( 3.584, -1.848) = 0
hi <- function(x){
(x[1]**2 + x[2] - 11)**2 + (x[1] + x[2]**2 -7)**2
}
## Find good parameters ##
nloop <- 100
trace.1 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.1[i, ] <- unlist(optim_sa(fun = hi,
start = (c(10, 10)),
trace = TRUE,
lower = c(-40, -40),
upper=c(40, 40),
control = list(t0 = 500,
nlimit = 150,
r = 0.8,
rf = 3,
ac_acc = 0.1,
dyn_rf = TRUE
)
)[c("function_value", "par")])
}
mean(trace.1$fun)
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, maxit = 3900, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, maxit = 3900, reltol = 0.1, temp = 100, trace = TRUE))
3900/2)()*3
(3900/2)*3
trace.2 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, maxit = 5850, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
trace.2 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 150, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 150, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 150, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 500, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 60, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 100, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 80, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 70, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
for(i in c(1 : nloop)) {
trace.2[i, ] <- unlist(optim(par = c(10, 10), fn = hi, method = "SANN", control = list(tmax = 500, reltol = 0.1, temp = 50, trace = TRUE))[c("value", "par")])
}
mean(trace.2$fun)
trace.3 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(maxit = 5850, temperature = 500, nb.stop.improvement = 30))[c("value", "par")])
}
mean(trace.3$fun)
mean(trace.3$fun)
trace.3 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 500, nb.stop.improvement = 30, maxit = 4000))[c("value", "par")])
}
mean(trace.3$fun)
table((apply(trace.3[c(2,3)], 1, paste, collapse = "/")))
trace.4 <- data.frame(fun = rep(NA, nloop), x1 = rep(NA, nloop), x2 = rep(NA, nloop))
for(i in c(1 : nloop)) {
trace.4[i, ] <- unlist(optim(par = c(-10, -10), fn = hi, method = "Nelder-Mead")[c("value", "par")])
}
mean(trace.4$fun)
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 50, nb.stop.improvement = 30, maxit = 4000))[c("value", "par")])
}
mean(trace.3$fun)
for(i in c(1 : nloop)) {
trace.3[i, ]  <- unlist(GenSA::GenSA(par = c(10, 10), fn = hi, lower = c(-40, -40), upper = c(40, 40), control = list(temperature = 500, nb.stop.improvement = 30, maxit = 4000))[c("value", "par")])
}
mean(trace.3$fun)
table((apply(trace.3[c(2,3)], 1, paste, collapse = "/")))
?postgresql
set.seed(1)
runif(1)
set.seed(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
source('~/Documents/Veroeffentlichungen/optimization_essay/RFiles/Ex2_Himmelblau_Int.R', echo=TRUE)
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-5, -5), upper = c(5, 5))
postscript('Fig/fig2-ex2-plot.eps', w = 7, h = 3.5, paper = "special", horizontal = FALSE)
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-5, -5), upper = c(5, 5))
dev.off()
own.cex <- 0.75
postscript('Fig/fig2-ex2-plot.eps', w = 14 * own.cex, h = 7 * own.cex, paper = "special", horizontal = FALSE)
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-5, -5), upper = c(5, 5))
dev.off()
own.cex <- 0.7
postscript('Fig/fig2-ex2-plot.eps', w = 14 * own.cex, h = 7 * own.cex, paper = "special", horizontal = FALSE)
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-5, -5), upper = c(5, 5))
dev.off()
own.cex <- 0.5
postscript('Fig/fig2-ex2-plot.eps', w = 14 * own.cex, h = 7 * own.cex, paper = "special", horizontal = FALSE)
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-5, -5), upper = c(5, 5))
dev.off()
own.cex <- 0.6
postscript('Fig/fig2-ex2-plot.eps', w = 14 * own.cex, h = 7 * own.cex, paper = "special", horizontal = FALSE)
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-5, -5), upper = c(5, 5))
dev.off()
own.cex <- 0.6
postscript('Fig/fig2-ex2-plot.eps', w = 14 * own.cex, h = 7 * own.cex, paper = "special", horizontal = FALSE)
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-6, -6), upper = c(6, 6))
dev.off()
int_programming
own.cex <- 0.6
postscript('Fig/fig2-ex2-plot.eps', w = 14 * own.cex, h = 7 * own.cex, paper = "special", horizontal = FALSE)
par(mfcol = c(1,2))
plot(int_programming)
plot(int_programming, type = "contour", lower = c(-5, -5), upper = c(5, 5))
dev.off()
save.image(file = '/home/khusman1/Documents/Veroeffentlichungen/optimization_essay/RFiles/Ex2_Integer.RData')
